{
  "version": 3,
  "sources": ["../keystone.ts", "../schemas/User.ts", "../schemas/fields.ts", "../access.ts", "../schemas/Role.ts", "../schemas/Post.ts", "../schemas/Tag.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n  })\n);\n", "import { list } from '@keystone-6/core';\r\nimport { allowAll } from '@keystone-6/core/access';\r\nimport { permissions } from \"../access\";\r\nimport {\r\n    text,\r\n    relationship,\r\n    password,\r\n    timestamp,\r\n    checkbox,\r\n} from '@keystone-6/core/fields';\r\n  \r\n\r\n\r\nexport const User = list({\r\n    fields: {\r\n        name: text({ \r\n            validation: { isRequired: true },\r\n            isFilterable: true\r\n        }),\r\n\r\n        email: text({\r\n            validation: { isRequired: true },\r\n            isIndexed: 'unique',\r\n            isFilterable: true\r\n        }),\r\n\r\n        password: password({ validation: { isRequired: true } }),\r\n\r\n        // we can use this field to see what Posts this User has authored\r\n        //   more on that in the Post list below\r\n        posts: relationship({ ref: 'Post.author', many: true }),\r\n\r\n        role: relationship({\r\n            ref: \"Role.assignedTo\",\r\n            access: {\r\n                create: permissions.canManageUsers,\r\n                update: permissions.canManageUsers,\r\n            },\r\n        }),\r\n\r\n        createdAt: timestamp({\r\n            defaultValue: { kind: 'now' },\r\n        }),\r\n\r\n        isInitialUser: checkbox({\r\n            defaultValue: false,\r\n            ui: {\r\n              createView: { fieldMode: \"hidden\" },\r\n              itemView: { fieldMode: \"hidden\" },\r\n            },\r\n        }),\r\n    },\r\n\r\n    ui: {\r\n        listView: {\r\n            initialColumns: [\"name\", \"role\"],\r\n        },\r\n    },\r\n\r\n    hooks: {\r\n        afterOperation: async ({ operation, item, context }) => {\r\n            if (operation === \"create\" && item?.isInitialUser) {\r\n                const allPermissions: { [key: string]: boolean } = {};\r\n                Object.keys(permissions).forEach((key) => {\r\n                    allPermissions[key] = true;\r\n                });\r\n                const superAdminRole = await context.db.Role.createOne({\r\n                    data: {\r\n                        name: \"SuperAdmin\",\r\n                        ...allPermissions,\r\n                        assignedTo: {\r\n                            connect: [\r\n                                {\r\n                                    id: item.id,\r\n                                },\r\n                            ],\r\n                        },\r\n                    },\r\n                });\r\n                if(item) item.roleId = superAdminRole.id;\r\n            }\r\n        },\r\n    },\r\n    access: allowAll\r\n})", "import { checkbox } from \"@keystone-6/core/fields\";\r\n\r\nexport const permissionFields = {\r\n  canManageProducts: checkbox({\r\n    defaultValue: false,\r\n    label: \"User can Update and delete any product\",\r\n  }),\r\n  canSeeOtherUsers: checkbox({\r\n    defaultValue: false,\r\n    label: \"User can query other users\",\r\n  }),\r\n  canManageUsers: checkbox({\r\n    defaultValue: false,\r\n    label: \"User can Edit other users\",\r\n  }),\r\n  canManageRoles: checkbox({\r\n    defaultValue: false,\r\n    label: \"User can CRUD roles\",\r\n  }),\r\n  canManageCart: checkbox({\r\n    defaultValue: false,\r\n    label: \"User can see and manage cart and cart items\",\r\n  }),\r\n  canManageOrders: checkbox({\r\n    defaultValue: false,\r\n    label: \"User can see and manage orders\",\r\n  }),\r\n};\r\n\r\nexport type Permission = keyof typeof permissionFields;\r\n\r\nexport const permissionsList: Permission[] = Object.keys(permissionFields) as Permission[];\r\n", "import { permissionsList } from \"./schemas/fields\";\r\nimport { ListAccessArgs } from \"./types/types\";\r\n// At it's simplest, the access control returns a yes or no value depending on the users session\r\n\r\nexport function isSignedIn({ session }: ListAccessArgs): boolean {\r\n  return !!session;\r\n}\r\n\r\nconst generatedPermissions = Object.fromEntries(\r\n  permissionsList.map((permission) => [\r\n    permission,\r\n    function ({ session }: ListAccessArgs) {\r\n      return session?.data.role?.[permission];\r\n    },\r\n  ])\r\n) as Record<typeof permissionsList[number], (args: ListAccessArgs) => boolean>;\r\n\r\n// Permissions check if someone meets a criteria - yes or no.\r\nexport const permissions = {\r\n  ...generatedPermissions,\r\n};\r\n\r\n// Rule based function\r\n// Rules can return a boolean - yes or no - or a filter which limits which products they can CRUD.\r\nexport const rules = {\r\n  canManageUsers({ session }: ListAccessArgs) {\r\n    if (!isSignedIn({ session })) {\r\n      return false;\r\n    }\r\n    if (permissions.canManageUsers({ session })) {\r\n      return true;\r\n    }\r\n    // Otherwise they may only update themselves!\r\n    return { id: { equals: session!.itemId } };\r\n  },\r\n\r\n  canManageRoles({ session }: ListAccessArgs) {\r\n    if (!isSignedIn({ session })) {\r\n      return false;\r\n    }\r\n    if (permissions.canManageRoles({ session })) {\r\n      return true;\r\n    }\r\n    // Otherwise they may only update themselves!\r\n    return { id: { equals: session!.itemId } };\r\n  },\r\n};\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { relationship, text } from \"@keystone-6/core/fields\";\r\nimport { permissions } from \"../access\";\r\nimport { permissionFields } from './fields';\r\n\r\nexport const Role = list({\r\n    access: {\r\n        operation: {\r\n            create: permissions.canManageRoles,\r\n            query: permissions.canManageRoles,\r\n            update: permissions.canManageRoles,\r\n            delete: permissions.canManageRoles,\r\n        }\r\n    },\r\n\r\n    fields: {\r\n        name: text({ validation: { isRequired: true } }),\r\n        ...permissionFields,\r\n        assignedTo: relationship({\r\n            ref: \"User.role\",\r\n            many: true,\r\n            ui: {\r\n              itemView: { fieldMode: \"read\" },\r\n            },\r\n        }),\r\n    },\r\n\r\n    ui: {\r\n        hideCreate: (args) => !permissions.canManageRoles(args),\r\n        hideDelete: (args) => !permissions.canManageRoles(args),\r\n        isHidden: (args) => !permissions.canManageRoles(args),\r\n        listView: {\r\n            initialColumns: [\"name\", \"assignedTo\"],\r\n        },\r\n    }\r\n})", "import { list } from '@keystone-6/core';\r\nimport { allowAll } from '@keystone-6/core/access';\r\nimport { relationship, text } from '@keystone-6/core/fields';\r\nimport { document } from '@keystone-6/fields-document';\r\n\r\nexport const Post = list({\r\n    // WARNING\r\n    //   for this starter project, anyone can create, query, update and delete anything\r\n    //   if you want to prevent random people on the internet from accessing your data,\r\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n    access: allowAll,\r\n\r\n    // this is the fields for our Post list\r\n    fields: {\r\n      title: text({ validation: { isRequired: true } }),\r\n\r\n      // the document field can be used for making rich editable content\r\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\r\n      content: document({\r\n        formatting: true,\r\n        layouts: [\r\n          [1, 1],\r\n          [1, 1, 1],\r\n          [2, 1],\r\n          [1, 2],\r\n          [1, 2, 1],\r\n        ],\r\n        links: true,\r\n        dividers: true,\r\n      }),\r\n\r\n      // with this field, you can set a User as the author for a Post\r\n      author: relationship({\r\n        // we could have used 'User', but then the relationship would only be 1-way\r\n        ref: 'User.posts',\r\n\r\n        // this is some customisations for changing how this will look in the AdminUI\r\n        ui: {\r\n          displayMode: 'cards',\r\n          cardFields: ['name', 'email'],\r\n          inlineEdit: { fields: ['name', 'email'] },\r\n          linkToItem: true,\r\n          inlineConnect: true,\r\n        },\r\n\r\n        // a Post can only have one author\r\n        //   this is the default, but we show it here for verbosity\r\n        many: false,\r\n      }),\r\n\r\n      // with this field, you can add some Tags to Posts\r\n      tags: relationship({\r\n        // we could have used 'Tag', but then the relationship would only be 1-way\r\n        ref: 'Tag.posts',\r\n\r\n        // a Post can have many Tags, not just one\r\n        many: true,\r\n\r\n        // this is some customisations for changing how this will look in the AdminUI\r\n        ui: {\r\n          displayMode: 'cards',\r\n          cardFields: ['name'],\r\n          inlineEdit: { fields: ['name'] },\r\n          linkToItem: true,\r\n          inlineConnect: true,\r\n          inlineCreate: { fields: ['name'] },\r\n        },\r\n      }),\r\n    },\r\n})", "import { list } from '@keystone-6/core';\r\nimport { allowAll } from '@keystone-6/core/access';\r\nimport { relationship, text } from '@keystone-6/core/fields';\r\n\r\nexport const Tag = list({\r\n    // WARNING\r\n    //   for this starter project, anyone can create, query, update and delete anything\r\n    //   if you want to prevent random people on the internet from accessing your data,\r\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n    access: allowAll,\r\n\r\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\r\n    \r\n\r\n    // this is the fields for our Tag list\r\n    fields: {\r\n      name: text(),\r\n      // this can be helpful to find out all the Posts associated with a Tag\r\n      posts: relationship({ ref: 'Post.tags', many: true }),\r\n    },\r\n\r\n})", "import type { Lists } from '.keystone/types';\nimport { User, Role, Post, Tag } from './schemas'\n\nexport const lists: Lists = {\n  User,\n  Role,\n  Post,\n  Tag\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\nimport { permissionsList } from \"./schemas/fields\";\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n    itemData: {\n      isInitialUser: true,\n    },\n  },\n  sessionData: `id name email role { ${permissionsList.join(\" \")} }`,\n  passwordResetLink: {\n    async sendToken(args) {\n      // send the email\n      // await sendPasswordResetEmail(args.token, args.identity);\n    },\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "session", "import_fields", "import_core", "import_fields", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields"]
}
